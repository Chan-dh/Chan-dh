<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LeetCode每日一题-1.2</title>
    <url>/2022/01/02/LeetCode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%981-2/</url>
    <content><![CDATA[<h2 id="LeetCode-390-消除数字"><a href="#LeetCode-390-消除数字" class="headerlink" title="LeetCode - 390.消除数字"></a>LeetCode - 390.消除数字</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">         _______________________________________________        </span><br><span class="line">        |   _      __        __                         |       </span><br><span class="line">________|  | | /| / / ___   / / ____ ___   __ _  ___    |_______</span><br><span class="line">\       |  | |/ |/ / / -_) / / / __// _ \ /  &#x27; \/ -_)   |      /</span><br><span class="line"> \      |  |__/|__/  \__/ /_/  \__/ \___//_/_/_/\__/    |     / </span><br><span class="line"> /      |_______________________________________________|     \ </span><br><span class="line">/__________)                                        (__________\</span><br></pre></td></tr></table></figure>

<span id="more"></span>
<h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lastRemaining</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line"></span><br><span class="line">        arr = []</span><br><span class="line">        arr = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>))</span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">len</span>(arr)&gt;<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span>(flag%<span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr),-<span class="number">2</span>):</span><br><span class="line">                    <span class="keyword">del</span> arr[i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr),<span class="number">2</span>):</span><br><span class="line">                    <span class="keyword">del</span> arr[j]</span><br><span class="line">                   </span><br><span class="line">            </span><br><span class="line">            flag = flag + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>直接暴力枚举，超时</p>
</blockquote>
<h3 id="二"><a href="#二" class="headerlink" title="二"></a>二</h3><p>不需要去关注右边界，最后一次的返回一定是左边界</p>
<p>每次进行一次操作，必定会减少一半的元素</p>
<p>由右到左：第一位元素必被删除</p>
<p>由左到右：n为奇数时，第一位元素会被删除，那么此时，应该将<strong>第一位元素加2</strong></p>
<p>n为偶数，第一位元素不会被删除，那么此时，第一位元素不会进行改变</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lastRemaining</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        flag = <span class="literal">True</span> </span><br><span class="line">        step = <span class="number">1</span></span><br><span class="line">        res = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> n&gt;<span class="number">1</span>:</span><br><span class="line">            <span class="comment">#flag 为True 表示由左到右 或者 n为奇数</span></span><br><span class="line">            <span class="keyword">if</span> flag <span class="keyword">or</span> n % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">                res += step</span><br><span class="line">            flag = no flag</span><br><span class="line">            step *= <span class="number">2</span></span><br><span class="line">            n //= <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#k偶数:从左到右</span></span><br><span class="line"><span class="comment">#    cnt 为奇数时，a1 以及 an 都会移动</span></span><br><span class="line"><span class="comment">#    cnt 为偶数时，a1移动，an不移动</span></span><br><span class="line"><span class="comment">#k为奇数:从右到左</span></span><br><span class="line"><span class="comment">#    cnt 为奇数时，a1 以及 an 都会移动</span></span><br><span class="line"><span class="comment">#    cnt 为偶数时，an移动，a1不移动</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lastRemaining</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        a1, an = <span class="number">1</span>, n</span><br><span class="line">        k, cnt, step = <span class="number">0</span>, n, <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> cnt &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> k % <span class="number">2</span> == <span class="number">0</span>:  <span class="comment"># 正向</span></span><br><span class="line">                a1 += step</span><br><span class="line">                <span class="keyword">if</span> cnt % <span class="number">2</span>:</span><br><span class="line">                    an -= step</span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 反向</span></span><br><span class="line">                <span class="keyword">if</span> cnt % <span class="number">2</span>:</span><br><span class="line">                    a1 += step</span><br><span class="line">                an -= step</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">            cnt &gt;&gt;= <span class="number">1</span> <span class="comment">#位运算 乘2</span></span><br><span class="line">            step &lt;&lt;= <span class="number">1</span>  <span class="comment"># 除2</span></span><br><span class="line">        <span class="keyword">return</span> a1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="递归的方法"><a href="#递归的方法" class="headerlink" title="递归的方法"></a>递归的方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">    <span class="title">def</span> <span class="title">lastRemaining</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n==<span class="number">1</span> <span class="keyword">else</span> <span class="number">2</span>*(n//<span class="number">2</span> + <span class="number">1</span> - self.lastRemaining(n//<span class="number">2</span>))</span><br></pre></td></tr></table></figure>





<p><strong>python三元运算符</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b=<span class="number">3</span> <span class="keyword">if</span> a&gt;<span class="number">4</span> <span class="keyword">else</span> <span class="number">2</span> </span><br></pre></td></tr></table></figure>
<p>翻译转换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> a&gt;<span class="number">4</span>:</span><br><span class="line">    b = <span class="number">3</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    b = <span class="number">2</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>数据结构与算法</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>LeetCode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode每日一题-1.3</title>
    <url>/2022/01/03/LeetCode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%981-3/</url>
    <content><![CDATA[<h2 id="LeetCode-1185-一周中的第几天"><a href="#LeetCode-1185-一周中的第几天" class="headerlink" title="LeetCode - 1185.一周中的第几天"></a>LeetCode - 1185.一周中的第几天</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">         _______________________________________________        </span><br><span class="line">        |   _      __        __                         |       </span><br><span class="line">________|  | | /| / / ___   / / ____ ___   __ _  ___    |_______</span><br><span class="line">\       |  | |/ |/ / / -_) / / / __// _ \ /  &#x27; \/ -_)   |      /</span><br><span class="line"> \      |  |__/|__/  \__/ /_/  \__/ \___//_/_/_/\__/    |     / </span><br><span class="line"> /      |_______________________________________________|     \ </span><br><span class="line">/__________)                                        (__________\</span><br></pre></td></tr></table></figure>

<span id="more"></span>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dayOfTheWeek</span>(<span class="params">self, day: <span class="built_in">int</span>, month: <span class="built_in">int</span>, year: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="comment"># 蔡勒公式</span></span><br><span class="line">        <span class="comment"># w=y+[y/4]+[c/4]-2c+[26(m+1)/10]+d-1 不行</span></span><br><span class="line">        <span class="comment"># w = [C/4] - 2C + y + [y/4] + [13 * (M+1) / 5] + d - 1 </span></span><br><span class="line">        ans = [<span class="string">&quot;Sunday&quot;</span>, <span class="string">&quot;Monday&quot;</span>, <span class="string">&quot;Tuesday&quot;</span>, <span class="string">&quot;Wednesday&quot;</span>, <span class="string">&quot;Thursday&quot;</span>, <span class="string">&quot;Friday&quot;</span>, <span class="string">&quot;Saturday&quot;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># y year 后两位</span></span><br><span class="line">        <span class="comment"># c year 前两位</span></span><br><span class="line">       </span><br><span class="line">        <span class="keyword">if</span> (month &lt;= <span class="number">2</span>) :</span><br><span class="line">            year -= <span class="number">1</span></span><br><span class="line">            month += <span class="number">12</span></span><br><span class="line">        </span><br><span class="line">        m = month</span><br><span class="line">        y = year % <span class="number">100</span></span><br><span class="line">        c = year // <span class="number">100</span></span><br><span class="line">        <span class="built_in">print</span>(y,c)</span><br><span class="line">        d = day</span><br><span class="line"></span><br><span class="line">        w = c//<span class="number">4</span> - <span class="number">2</span>*c + y + y//<span class="number">4</span> + (<span class="number">13</span>*(m+<span class="number">1</span>)//<span class="number">5</span>) + d - <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(w)</span><br><span class="line">        <span class="keyword">while</span> (w&lt;<span class="number">0</span>):</span><br><span class="line">            w = w+<span class="number">7</span></span><br><span class="line">        n = w%<span class="number">7</span></span><br><span class="line">        <span class="keyword">return</span> ans[n]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="蔡勒公式"><a href="#蔡勒公式" class="headerlink" title="蔡勒公式"></a>蔡勒公式</h3><p>蔡勒（Zeller）公式，是一个计算星期的公式，随便给一个日期，就能用这个公式推算出是星期几。<br>公式<strong>W = [C/4] - 2C + y + [y/4] + [13 * (M+1） / 5] + d - 1</strong></p>
<p><strong>c</strong>为年份的前两位</p>
<p><strong>y</strong>为年份的后两位</p>
<p><strong>m</strong>当m为一二月时，算作前一年的13（1），14（2）月，其他不变</p>
<p><strong>w</strong>：w为正时，w对7取模，得到的数字对应星期数，其中，0-星期天····<br>       ；w为负时，加7，直到为正时，对7取模。</p>
<h4 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h4><blockquote>
<p>蔡勒公式只适合于1582年（中国明朝万历十年）10月15日<br><a href="http://www.cnblogs.com/tgycoder/p/4960487.html">www.cnblogs.com/tgycoder/p/4960487.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>数据结构与算法</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>LeetCode每日一题</tag>
        <tag>蔡勒公式</tag>
      </tags>
  </entry>
  <entry>
    <title>判断链表中是否存在环</title>
    <url>/2022/01/08/%E5%88%A4%E6%96%AD%E9%93%BE%E8%A1%A8%E4%B8%AD%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E7%8E%AF/</url>
    <content><![CDATA[<h1 id="LeetCode-141-环形链表"><a href="#LeetCode-141-环形链表" class="headerlink" title="LeetCode 141.环形链表"></a>LeetCode 141.环形链表</h1><span id="more"></span>
<h2 id="方法一：hash表"><a href="#方法一：hash表" class="headerlink" title="方法一：hash表"></a>方法一：hash表</h2><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>遍历链表，遇到节点已经存在hash表，即表示存在环路，否者，添加进hash表。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        p = head</span></span><br><span class="line"><span class="string">        while (p != None):</span></span><br><span class="line"><span class="string">            temp = p.val</span></span><br><span class="line"><span class="string">            q = head</span></span><br><span class="line"><span class="string">            while (q != p):</span></span><br><span class="line"><span class="string">                if (q.val == temp):</span></span><br><span class="line"><span class="string">                    return True</span></span><br><span class="line"><span class="string">        return False </span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        ans = <span class="built_in">set</span>()</span><br><span class="line">        p = head</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">None</span>) :</span><br><span class="line">            <span class="keyword">if</span> p <span class="keyword">in</span> ans :</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ans.add(p)</span><br><span class="line">            p = p.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p><strong>时间复杂度：</strong> O(<em><strong>N</strong></em>),遍历整个链表</p>
<p><strong>空间复杂度：</strong> O(<em><strong>N</strong></em>),使用了set数据结构，进行存储</p>
<h2 id="方法二：快慢指针"><a href="#方法二：快慢指针" class="headerlink" title="方法二：快慢指针"></a>方法二：快慢指针</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><strong>LeetCode</strong><br>「Floyd 判圈算法」（又称龟兔赛跑算法）:</p>
<p>假想「乌龟」和「兔子」在链表上移动，「兔子」跑得快，「乌龟」跑得慢。当「乌龟」和「兔子」从链表上的同一个节点开始移动时，如果该链表中没有环，那么「兔子」将一直处于「乌龟」的前方；如果该链表中有环，那么「兔子」会先于「乌龟」进入环，并且一直在环内移动。等到「乌龟」进入环时，由于「兔子」的速度快，它一定会在某个时刻与乌龟相遇，即套了「乌龟」若干圈。</p>
<p><strong>具体</strong>定义两个指针，一快一满。慢指针每次只移动一步，而快指针每次移动两步。初始时，慢指针在位置 head，而快指针在位置 head.next。这样一来，如果在移动的过程中，快指针反过来追上慢指针，就说明该链表为环形链表。否则快指针将到达链表尾部，该链表不为环形链表。</p>
<h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><p>为什么我们要规定初始时慢指针在位置 head，快指针在位置 head.next，而不是两个指针都在位置 head（即与「乌龟」和「兔子」中的叙述相同）？</p>
<p>观察下面的代码，我们使用的是 while 循环，循环条件先于循环体。由于循环条件一定是判断快慢指针是否重合，如果我们将两个指针初始都置于 head，那么 while 循环就不会执行。因此，我们可以假想一个在 head 之前的虚拟节点，慢指针从虚拟节点移动一步到达 head，快指针从虚拟节点移动两步到达 head.next，这样我们就可以使用 while 循环了。</p>
<p>当然，我们也可以使用 do-while 循环。此时，我们就可以把快慢指针的初始值都置为 head。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span>(<span class="params">self, head: ListNode</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        slow = head</span><br><span class="line">        fast = head.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> slow != fast:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> fast <span class="keyword">or</span> <span class="keyword">not</span> fast.<span class="built_in">next</span>: <span class="comment"># slow,fast 为 None，链表循环结束，不存在环路</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            slow = slow.<span class="built_in">next</span></span><br><span class="line">            fast = fast.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p><strong>时间复杂度：</strong> O(<em><strong>N</strong></em>)，循环遍历一次链表</p>
<p><strong>空间复杂度：</strong> O(<em><strong>1</strong></em>)，没有使用额外的存储空间</p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>链表</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>滑动窗口</title>
    <url>/2022/01/09/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
    <content><![CDATA[<h1 id="算法——滑动窗口"><a href="#算法——滑动窗口" class="headerlink" title="算法——滑动窗口"></a>算法——滑动窗口</h1><span id="more"></span>

<blockquote>
<p>LeetCode 3.无重复字符的最长子串</p>
<p>LeetCode 567.字符串的排列</p>
</blockquote>
<h2 id="LeetCode-3-无重复字符的最长子串"><a href="#LeetCode-3-无重复字符的最长子串" class="headerlink" title="LeetCode 3.无重复字符的最长子串"></a>LeetCode 3.无重复字符的最长子串</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 哈希集合，记录每个字符是否出现过</span></span><br><span class="line">        unordered_set&lt;<span class="keyword">char</span>&gt; occ;</span><br><span class="line">        <span class="keyword">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动</span></span><br><span class="line">        <span class="keyword">int</span> rk = <span class="number">-1</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 枚举左指针的位置，初始值隐性地表示为 -1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 左指针向右移动一格，移除一个字符</span></span><br><span class="line">                occ.<span class="built_in">erase</span>(s[i - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (rk + <span class="number">1</span> &lt; n &amp;&amp; !occ.<span class="built_in">count</span>(s[rk + <span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="comment">// 不断地移动右指针</span></span><br><span class="line">                occ.<span class="built_in">insert</span>(s[rk + <span class="number">1</span>]);</span><br><span class="line">                ++rk;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 第 i 到 rk 个字符是一个极长的无重复字符子串</span></span><br><span class="line">            ans = <span class="built_in">max</span>(ans, rk - i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="LeetCode567-字符串的排列"><a href="#LeetCode567-字符串的排列" class="headerlink" title="LeetCode567.字符串的排列"></a>LeetCode567.字符串的排列</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkInclusion</span><span class="params">(string s1, string s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s1.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> m = s2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n &gt; m) </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">cnt1</span><span class="params">(<span class="number">26</span>)</span>, <span class="title">cnt2</span><span class="params">(<span class="number">26</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            ++ cnt1[s1[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            ++ cnt2[s2[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span> (cnt1 == cnt2)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; m; ++i) &#123;</span><br><span class="line">            ++ cnt2[s2[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            -- cnt2[s2[i-n] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span> (cnt1 == cnt2)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>滑动窗口</tag>
      </tags>
  </entry>
  <entry>
    <title>翻转二叉树</title>
    <url>/2022/01/13/%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<h1 id="LeetCode-226-翻转二叉树"><a href="#LeetCode-226-翻转二叉树" class="headerlink" title="LeetCode 226.翻转二叉树"></a>LeetCode 226.翻转二叉树</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><span id="more"></span>

<p><strong>递归</strong>，采用后续遍历，从叶子节点开始，进行左右交换</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;right);</span><br><span class="line">        <span class="comment">// 交换</span></span><br><span class="line">        TreeNode * temp; </span><br><span class="line">        temp = root-&gt;left;</span><br><span class="line">        root-&gt;left = root-&gt;right;</span><br><span class="line">        root-&gt;right = temp;</span><br><span class="line">        <span class="keyword">return</span> root;     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度：<strong>O</strong>(<em><strong>N</strong></em>)，需要遍历二叉树中所有的节点</p>
<p>空间复杂度：<strong>O</strong>(<em><strong>N</strong></em>)，最好的情况为完全二叉树，二叉树的高度最小，为<strong>O</strong>(<em><strong>log2N</strong></em>)；当二叉树成链状时，空间复杂度为<strong>O</strong>(<em><strong>N</strong></em>)</p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p><strong>bfs</strong>，层次遍历：采用辅助队列，从上到下的进行交换，每次出队，都对出队节点进行交换。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        queue&lt;TreeNode*&gt; qu;</span><br><span class="line">        qu.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (!qu.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            TreeNode * p = qu.<span class="built_in">front</span>();</span><br><span class="line">            qu.<span class="built_in">pop</span>();</span><br><span class="line">            TreeNode * temp = p-&gt;left;</span><br><span class="line">            p-&gt;left = p-&gt;right;</span><br><span class="line">            p-&gt;right = temp;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;left != <span class="literal">nullptr</span>) </span><br><span class="line">                qu.<span class="built_in">push</span>(p-&gt;left);</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;right != <span class="literal">nullptr</span>)</span><br><span class="line">                qu.<span class="built_in">push</span>(p-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度：<strong>O</strong>(<em><strong>N</strong></em>)</p>
<p>空间复杂度：<strong>O</strong>(<em><strong>N</strong></em>)</p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/12/30/hello-world/</url>
    <content><![CDATA[<h1 id="Welcome-to-Chan-DH’s-Blog"><a href="#Welcome-to-Chan-DH’s-Blog" class="headerlink" title="Welcome to Chan DH’s Blog"></a>Welcome to Chan DH’s Blog</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">         _______________________________________________        </span><br><span class="line">        |   _      __        __                         |       </span><br><span class="line">________|  | | /| / / ___   / / ____ ___   __ _  ___    |_______</span><br><span class="line">\       |  | |/ |/ / / -_) / / / __// _ \ /  &#x27; \/ -_)   |      /</span><br><span class="line"> \      |  |__/|__/  \__/ /_/  \__/ \___//_/_/_/\__/    |     / </span><br><span class="line"> /      |_______________________________________________|     \ </span><br><span class="line">/__________)                                        (__________\</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>python list与string的相互转换</title>
    <url>/2022/01/07/python-list%E4%B8%8Estring%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="list-–-gt-string"><a href="#list-–-gt-string" class="headerlink" title="list –&gt; string"></a>list –&gt; string</h2><span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_  = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">str_1 = <span class="string">&quot;&quot;</span>.join(list_)</span><br><span class="line">str_2 = <span class="string">&quot;.&quot;</span>.join(list_)</span><br><span class="line">str_2 = <span class="string">&quot; &quot;</span>.join(list_)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str_1, str_2, str_3)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<blockquote>
<p>“12345”, “1.2.3.4.5”, “1 2 3 4 5”</p>
</blockquote>
<h2 id="string-–-gt-list"><a href="#string-–-gt-list" class="headerlink" title="string –&gt; list"></a>string –&gt; list</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&quot;1234&quot;</span></span><br><span class="line">list1 = <span class="built_in">list</span>(str1)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line">str2 = <span class="string">&quot;wo shi sha bi!&quot;</span></span><br><span class="line">list2 = <span class="built_in">list</span>(str2)</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<blockquote>
<p>[“1”, “2”, “3”, “4”, “5”]</p>
</blockquote>
<blockquote>
<p>[“wo”, “shi”, “sha”, “bi”]</p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode每日一题1-5</title>
    <url>/2022/01/05/LeetCode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%981-5/</url>
    <content><![CDATA[<h2 id="LeetCode-1576-替换所有的问号"><a href="#LeetCode-1576-替换所有的问号" class="headerlink" title="LeetCode - 1576. 替换所有的问号"></a>LeetCode - 1576. 替换所有的问号</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">         _______________________________________________        </span><br><span class="line">        |   _      __        __                         |       </span><br><span class="line">________|  | | /| / / ___   / / ____ ___   __ _  ___    |_______</span><br><span class="line">\       |  | |/ |/ / / -_) / / / __// _ \ /  &#x27; \/ -_)   |      /</span><br><span class="line"> \      |  |__/|__/  \__/ /_/  \__/ \___//_/_/_/\__/    |     / </span><br><span class="line"> /      |_______________________________________________|     \ </span><br><span class="line">/__________)                                        (__________\</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>题中要求将所有 <strong>?</strong> 替换为小写字母，且要保证左右相邻的字母不相同，</p>
<p>分析：只需要三个字母 <strong>abc</strong> 即可替换所有的 <strong>?</strong> ，同时保证相邻字母不同。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">modifyString</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;?&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">char</span> ch = <span class="string">&#x27;a&#x27;</span>; ch &lt;= <span class="string">&#x27;c&#x27;</span>; ch++)&#123;</span><br><span class="line">                    <span class="keyword">if</span> ((i &gt; <span class="number">0</span> &amp;&amp; s[i<span class="number">-1</span>] == ch) || (i &lt; (len<span class="number">-1</span>) &amp;&amp; s[i+<span class="number">1</span>] == ch))<span class="comment">//******</span></span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    s[i] = ch;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>小菜鸡一个</p>
</blockquote>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>数据结构与算法</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>LeetCode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode数据结构入门</title>
    <url>/2022/01/19/LeetCode%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="数据结构-入门"><a href="#数据结构-入门" class="headerlink" title="数据结构 入门"></a>数据结构 入门</h1><span id="more"></span>

<h2 id="1数组"><a href="#1数组" class="headerlink" title="1数组"></a>1数组</h2><ol start="217">
<li> 存在重复元素</li>
<li>最大子数组和</li>
</ol>
<h2 id="2数组"><a href="#2数组" class="headerlink" title="2数组"></a>2数组</h2><ol>
<li><p>两数之和</p>
</li>
<li><p>合并两个有序数组</p>
</li>
</ol>
<h2 id="3数组"><a href="#3数组" class="headerlink" title="3数组"></a>3数组</h2><ol start="350">
<li><p>两个数组的交集</p>
</li>
<li><p>买股票的最佳时机</p>
</li>
</ol>
<h2 id="4数组"><a href="#4数组" class="headerlink" title="4数组"></a>4数组</h2><ol start="566">
<li><p>重塑矩阵</p>
</li>
<li><p>杨辉三角</p>
</li>
</ol>
<h2 id="5数组"><a href="#5数组" class="headerlink" title="5数组"></a>5数组</h2><ol start="36">
<li><p>有效数组</p>
</li>
<li><p>矩阵置零</p>
</li>
</ol>
<h2 id="6字符串"><a href="#6字符串" class="headerlink" title="6字符串"></a>6字符串</h2><ol start="387">
<li><p>字符串中的第一个唯一字符</p>
</li>
<li><p>赎金信</p>
</li>
<li><p>有效的字母位词</p>
</li>
</ol>
<h2 id="7链表"><a href="#7链表" class="headerlink" title="7链表"></a>7链表</h2><ol start="141">
<li><p>环形链表</p>
</li>
<li><p>合并两个有序链表</p>
</li>
<li><p>移除链表元素</p>
</li>
</ol>
<h2 id="8链表"><a href="#8链表" class="headerlink" title="8链表"></a>8链表</h2><ol start="206">
<li><p>反转链表</p>
</li>
<li><p>删除排序链表中的重复元素</p>
</li>
</ol>
<h2 id="9-栈-队列"><a href="#9-栈-队列" class="headerlink" title="9 栈/队列"></a>9 栈/队列</h2><ol start="20">
<li><p>有效的括号</p>
</li>
<li><p>用栈实现队列</p>
</li>
</ol>
<h2 id="10树"><a href="#10树" class="headerlink" title="10树"></a>10树</h2><ol start="144">
<li><p>二叉树的前序遍历</p>
</li>
<li><p>二叉树的中序遍历</p>
</li>
<li><p>二叉树的后续遍历</p>
</li>
</ol>
<h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><ol start="102">
<li><p>二叉树的层序遍历</p>
</li>
<li><p>二叉树的最大深度</p>
</li>
<li><p>对称二叉树</p>
</li>
</ol>
<h2 id="树-1"><a href="#树-1" class="headerlink" title="树"></a>树</h2><ol start="700">
<li><p>二叉搜索树中的遍历</p>
</li>
<li><p>二叉搜索树的插入操作</p>
</li>
</ol>
<h2 id="树-2"><a href="#树-2" class="headerlink" title="树"></a>树</h2><ol start="98">
<li><p>验证二叉搜索树</p>
</li>
<li><p>两数之后5-输入BST</p>
</li>
<li><p>二叉搜索树的最近公共祖先</p>
</li>
</ol>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
</search>
